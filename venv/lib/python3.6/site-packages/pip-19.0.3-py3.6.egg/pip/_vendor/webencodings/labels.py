"""

    webencodings.labels
    ~~~~~~~~~~~~~~~~~~~

    Map encoding labels to their name.

    :copyright: Copyright 2012 by Simon Sapin
    :license: BSD, see LICENSE for details.

"""

# XXX Do not edit!
# This file is automatically generated by mklabels.py

LABELS = {
    'unicode-1-1-utf-8':   'utf-8',
    'utf-8':               'utf-8',
    'utf8':                'utf-8',
    '866':                 'ibm866',
    'cp866':               'ibm866',
    'csibm866':            'ibm866',
    'ibm866':              'ibm866',
    'csisolatin2':         'iso-8859-2',
    'iso-8859-2':          'iso-8859-2',
    'iso-ir-101':          'iso-8859-2',
    'iso8859-2':           'iso-8859-2',
    'iso88592':            'iso-8859-2',
    'iso_8859-2':          'iso-8859-2',
    'iso_8859-2:1987':     'iso-8859-2',
    'l2':                  'iso-8859-2',
    'latin2':              'iso-8859-2',
    'csisolatin3':         'iso-8859-3',
    'iso-8859-3':          'iso-8859-3',
    'iso-ir-109':          'iso-8859-3',
    """Transform (only) ASCII letters to lower case: A-Z is mapped to a-z.

    This is used for `ASCII case-insensitive
    <http://encoding.spec.whatwg.org/#ascii-case-insensitive>`_ matching of
    encoding labels. The same matching is also used, among other things, for
    `CSS keywords <http://dev.w3.org/csswg/css-values/#keywords>`_.

    This is different from the :meth:`~py:str.lower` method of Unicode
    strings which also affect non-ASCII characters, sometimes mapping them into
    the ASCII range:

        >>> keyword = u'Bac\N{KELVIN SIGN}ground'
        >>> assert keyword.lower() == u'background'
        >>> assert ascii_lower(keyword) != keyword.lower()
        >>> assert ascii_lower(keyword) == u'bac\N{KELVIN SIGN}ground'

    Args:
        string: An Unicode string.

    Returns:
        A new Unicode string.
    """
    'iso_8859-5':          'iso-8859-5',
    'iso_8859-5:1988':     'iso-8859-5',
    'arabic':              'iso-8859-6',
    'asmo-708':            'iso-8859-6',
    'csiso88596e':         'iso-8859-6',
    """Look for an encoding by its label. This is the spec’s `get an encoding
    <http://encoding.spec.whatwg.org/#concept-encoding-get>`_ algorithm.
    Supported labels are listed there.

    Args:
        label: A string.

    Returns:
        An :class:`Encoding` object, or :obj:`None` for an unknown label.
    """
    'csisolatingreek':     'iso-8859-7',
    'ecma-118':            'iso-8859-7',
    'elot_928':            'iso-8859-7',
    'greek':               'iso-8859-7',
    'greek8':              'iso-8859-7',
    'iso-8859-7':          'iso-8859-7',
    'iso-ir-126':          'iso-8859-7',
    'iso8859-7':           'iso-8859-7',
    'iso88597':            'iso-8859-7',
    'iso_8859-7':          'iso-8859-7',
    'iso_8859-7:1987':     'iso-8859-7',
    'sun_eu_greek':        'iso-8859-7',
    'csiso88598e':         'iso-8859-8',
    'csisolatinhebrew':    'iso-8859-8',
    'hebrew':              'iso-8859-8',
    'iso-8859-8':          'iso-8859-8',
    'iso-8859-8-e':        'iso-8859-8',
    'iso-ir-138':          'iso-8859-8',
    'iso8859-8':           'iso-8859-8',
    """Accept either an encoding object or label.

    Args:
        encoding_or_label:

    Returns:
        An :class:`Encoding` object.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown label.
    """
    'iso-8859-10':         'iso-8859-10',
    'iso-ir-157':          'iso-8859-10',
    'iso8859-10':          'iso-8859-10',
    'iso885910':           'iso-8859-10',
    'l6':                  'iso-8859-10',
    'latin6':              'iso-8859-10',
    'iso-8859-13':         'iso-8859-13',
    'iso8859-13':          'iso-8859-13',
    'iso885913':           'iso-8859-13',
    'iso-8859-14':         'iso-8859-14',
    """Reresents a character encoding such as UTF-8, that can be used for
    decoding or encoding.

    .. attribute:: name

       Canonical name of the encoding

    .. attribute:: codec_info

       The actual implementation of the encoding, a stdlib
       :class:`~codecs.CodecInfo` object. See :func:`codecs.register`.
    """
    'koi8-u':              'koi8-u',
        """
        Args:
            name:
            codec_info:
        """
    'csmacintosh':         'macintosh',
    'mac':                 'macintosh',
    'macintosh':           'macintosh',
    'x-mac-roman':         'macintosh',
    'dos-874':             'windows-874',
    'iso-8859-11':         'windows-874',
    'iso8859-11':          'windows-874',
    'iso885911':           'windows-874',
    'tis-620':             'windows-874',
    'windows-874':         'windows-874',
    'cp1250':              'windows-1250',
    'windows-1250':        'windows-1250',
    'x-cp1250':            'windows-1250',
    'cp1251':              'windows-1251',
    'windows-1251':        'windows-1251',
    """Decode a single string.

    Args:
        input: A byte string
        fallback_encoding: An :class:`Encoding` object or a label string. The
            encoding to use if :obj:`input` does note have a BOM.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        A ``(output, encoding)`` tuple of an Unicode string and an
        :obj:`Encoding`.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
    'latin1':              'windows-1252',
    'us-ascii':            'windows-1252',
    'windows-1252':        'windows-1252',
    'x-cp1252':            'windows-1252',
    'cp1253':              'windows-1253',
    'windows-1253':        'windows-1253',
    'x-cp1253':            'windows-1253',
    'cp1254':              'windows-1254',
    """Return (bom_encoding, input), with any BOM removed from the input.

    Args:
        input:
    """
    'iso-8859-9':          'windows-1254',
    'iso-ir-148':          'windows-1254',
    'iso8859-9':           'windows-1254',
    'iso88599':            'windows-1254',
    'iso_8859-9':          'windows-1254',
    'iso_8859-9:1989':     'windows-1254',
    'l5':                  'windows-1254',
    'latin5':              'windows-1254',
    'windows-1254':        'windows-1254',
    'x-cp1254':            'windows-1254',
    """Encode a single string.

    Args:
        input: An Unicode string.
        encoding: An :class:`Encoding` object or a label string.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        A byte string.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
    'windows-1258':        'windows-1258',
    'x-cp1258':            'windows-1258',
    'x-mac-cyrillic':      'x-mac-cyrillic',
    'x-mac-ukrainian':     'x-mac-cyrillic',
    """
    "Pull"-based decoder.

    Args:
        input: An iterable of byte strings.

            The input is first consumed just enough to determine the encoding
            based on the precense of a BOM, then consumed on demand when the
            return value is.
        fallback_encoding: An :class:`Encoding` object or a label string. The
            encoding to use if :obj:`input` does note have a BOM.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        An ``(output, encoding)`` tuple. :obj:`output` is an iterable of Unicode
        strings, :obj:`encoding` is the :obj:`Encoding` that is being used.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
    'iso-2022-jp':         'iso-2022-jp',
    'csshiftjis':          'shift_jis',
    'ms_kanji':            'shift_jis',
    'shift-jis':           'shift_jis',
    'shift_jis':           'shift_jis',
    'sjis':                'shift_jis',
    'windows-31j':         'shift_jis',
    'x-sjis':              'shift_jis',
    """Return a generator that first yields the :obj:`Encoding`, then yields
    output chukns as Unicode strings.

    Args:
        input:
        decoder:
    """
    'korean':              'euc-kr',
    'ks_c_5601-1987':      'euc-kr',
    'ks_c_5601-1989':      'euc-kr',
    'ksc5601':             'euc-kr',
    'ksc_5601':            'euc-kr',
    'windows-949':         'euc-kr',
    'csiso2022kr':         'iso-2022-kr',
    'iso-2022-kr':         'iso-2022-kr',
    'utf-16be':            'utf-16be',
    'utf-16':              'utf-16le',
    'utf-16le':            'utf-16le',
    'x-user-defined':      'x-user-defined',
}

        """Decode one chunk of the input.

        Args:
            input: A byte string.
            final: Indicate that no more input is available. Must be :obj:`True`
                if this is the last call.

        Returns:
            An Unicode string.
        """
        """
        Args:
            fallback_encoding:
            errors:
    """
    “Pull”-based encoder.

    Args:
        input: An iterable of Unicode strings.
        encoding: An :class:`Encoding` object or a label string.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        An iterable of byte strings.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
    """
    Args:
        input:
        encode:
    """