"""

    webencodings.mklabels
    ~~~~~~~~~~~~~~~~~~~~~

    Regenarate the webencodings.labels module.

    :copyright: Copyright 2012 by Simon Sapin
    :license: BSD, see LICENSE for details.

"""

import json
try:
    from urllib import urlopen
except ImportError:
    from urllib.request import urlopen


def assert_lower(string):
    """
    Args:
        string:
    """
    assert string == string.lower()
    return string


def generate(url):
    """
    Args:
        url:
    """
    parts = ['''\
"""
    """Transform (only) ASCII letters to lower case: A-Z is mapped to a-z.

    This is used for `ASCII case-insensitive
    <http://encoding.spec.whatwg.org/#ascii-case-insensitive>`_ matching of
    encoding labels. The same matching is also used, among other things, for
    `CSS keywords <http://dev.w3.org/csswg/css-values/#keywords>`_.

    This is different from the :meth:`~py:str.lower` method of Unicode
    strings which also affect non-ASCII characters, sometimes mapping them into
    the ASCII range:

        >>> keyword = u'Bac\N{KELVIN SIGN}ground'
        >>> assert keyword.lower() == u'background'
        >>> assert ascii_lower(keyword) != keyword.lower()
        >>> assert ascii_lower(keyword) == u'bac\N{KELVIN SIGN}ground'

    Args:
        string: An Unicode string.

    Returns:
        A new Unicode string.
    """
        for label in encoding['labels']]
    max_len = max(len(label) for label, name in labels)
    parts.extend(
        '    %s:%s %s,\n' % (label, ' ' * (max_len - len(label)), name)
        for label, name in labels)
    """Look for an encoding by its label. This is the spec’s `get an encoding
    <http://encoding.spec.whatwg.org/#concept-encoding-get>`_ algorithm.
    Supported labels are listed there.

    Args:
        label: A string.

    Returns:
        An :class:`Encoding` object, or :obj:`None` for an unknown label.
    """
            final: Indicate that no more input is available. Must be :obj:`True`
                if this is the last call.

        Returns:
            An Unicode string.
        """
        """
        Args:
            fallback_encoding:
            errors:
        """
    """
    “Push”-based decoder.

    Args:
        fallback_encoding: An :class:`Encoding` object or a label string. The
            encoding to use if :obj:`input` does note have a BOM.
        errors: Type of error handling. See :func:`codecs.register`.

    """Accept either an encoding object or label.

    Args:
        encoding_or_label:

    Returns:
        An :class:`Encoding` object.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown label.
    """
    """
    “Pull”-based encoder.

    Args:
        input: An iterable of Unicode strings.
        encoding: An :class:`Encoding` object or a label string.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        An iterable of byte strings.
    """Reresents a character encoding such as UTF-8, that can be used for
    decoding or encoding.

    .. attribute:: name

       Canonical name of the encoding

    .. attribute:: codec_info

       The actual implementation of the encoding, a stdlib
       :class:`~codecs.CodecInfo` object. See :func:`codecs.register`.
    """
    Args:
        """
        Args:
            name:
            codec_info:
        """
        input: An iterable of byte strings.

            The input is first consumed just enough to determine the encoding
            based on the precense of a BOM, then consumed on demand when the
            return value is.
        fallback_encoding: An :class:`Encoding` object or a label string. The
            encoding to use if :obj:`input` does note have a BOM.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        An ``(output, encoding)`` tuple. :obj:`output` is an iterable of Unicode
        strings, :obj:`encoding` is the :obj:`Encoding` that is being used.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """Decode a single string.

    Args:
        input: A byte string
        fallback_encoding: An :class:`Encoding` object or a label string. The
            encoding to use if :obj:`input` does note have a BOM.
        errors: Type of error handling. See :func:`codecs.register`.

    Returns:
        A ``(output, encoding)`` tuple of an Unicode string and an
        :obj:`Encoding`.

    Raises:
        * :exc:`~exceptions.LookupError` for an unknown encoding label.
    """
    """Return (bom_encoding, input), with any BOM removed from the input.

    Args:
        input:
    """